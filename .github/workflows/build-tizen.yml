name: Docs and tizen build

on:
  workflow_dispatch:
  push:
    # branches:
    #   - tizen-build
    tags:
      - 'v*'

jobs:
  build-docs:
    name: Build Docs
    runs-on: ubuntu-latest
    env:
      WORKSPACE_PATH: app/docs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node and pnpm
        uses: ./.github/actions/setup-node-and-pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build the application
        run: npx nx build docs --verbose

      - name: Zip the dist folder
        run: zip -r docs.zip ${{ env.WORKSPACE_PATH }}/dist

      - name: Upload the zipped dist folder
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs.zip
          if-no-files-found: error

  build-tizen:
    name: Build Tizen App
    runs-on: ubuntu-latest
    env:
      WORKSPACE_PATH: app/web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node and pnpm
        uses: ./.github/actions/setup-node-and-pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build the application
        run: npx nx build web --verbose

      - name: Prepare Tizen CLI
        uses: ./.github/actions/perpare-tizen-cli

      - name: Tizen Build the application
        working-directory: app/web
        run: tizen build-web -- ./dist

      - name: Tizen package the application
        working-directory: ${{ env.WORKSPACE_PATH }}
        run: |
          tizen package -t wgt -o out -- ./dist/.buildResult

      - name: Get Web version and build hash
        id: versioning
        uses: ./.github/actions/get-ctv-version-and-hash

      - name: Calculate package filename
        id: package-filename
        run: echo "filename=game-gotham-${{ steps.versioning.outputs.version }}-${{ steps.versioning.outputs.hash }}" >> $GITHUB_OUTPUT

      - name: Rename wgt file
        run: |
          mv $(ls ${{ env.WORKSPACE_PATH }}/out/*.wgt) ${{ env.WORKSPACE_PATH }}/out/${{ steps.package-filename.outputs.filename }}.wgt

      - name: Upload the wgt file
        uses: actions/upload-artifact@v4
        with:
          name: tizen
          path: ${{ env.WORKSPACE_PATH }}/out/*
          if-no-files-found: error

  release:
    name: Send a release message to Slack
    runs-on: ubuntu-latest
    needs: [build-docs, build-tizen]
    env: 
      ACTIFACTS_OUTPUT_DIRECTORY_NAME: build-assets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup node and pnpm
        uses: ./.github/actions/setup-node-and-pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          path: ./${{ env.ACTIFACTS_OUTPUT_DIRECTORY_NAME }}
          merge-multiple: true

      - name: Notify
        run: |
          build_dir=$(pwd)/${{ env.ACTIFACTS_OUTPUT_DIRECTORY_NAME }}
          npx nx run web:ci-notify \
            --token ${{ secrets.SLACK_BOT_TOKEN }} \
            --channel ${{ vars.SLACK_RELEASE_CHANNEL_ID }} \
            --directory $build_dir \
            --tag "v*"
