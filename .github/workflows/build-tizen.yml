name: Docs and tizen build

on:
  workflow_dispatch:
    inputs:
      dev:
        description: "🛠️ Build for dev environment"
        type: boolean
        default: true
      qa:
        description: "🧪 Build for qa environment"
        type: boolean
        default: false
      staging:
        description: "🚦 Build for staging environment"
        type: boolean
        default: false
      prodtest:
        description: "🔬 Build for prodtest environment"
        type: boolean
        default: false
      prod:
        description: "🚀 Build for prod environment"
        type: boolean
        default: false
jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-matrix.outputs.environments }}
    steps:
      - id: set-matrix
        run: |
          # Initialize environments array
          ENVIRONMENTS="[]"

          # Check if triggered by push tag
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            # Extract environment from tag name (format: ctv-ENV-v*.*.*)
            TAG_NAME="${{ github.ref_name }}"
            if [[ $TAG_NAME =~ ^ctv-([^-]+)-v ]]; then
              ENV_NAME="${BASH_REMATCH[1]}"
              ENVIRONMENTS=$(echo $ENVIRONMENTS | jq '. += ["'$ENV_NAME'"]')
              echo "Extracted environment '$ENV_NAME' from tag '$TAG_NAME'"
            fi
          else
            # Manual workflow dispatch logic
            if [[ "${{ github.event.inputs.dev }}" == "true" ]]; then
              ENVIRONMENTS=$(echo $ENVIRONMENTS | jq '. += ["dev"]')
            fi
            if [[ "${{ github.event.inputs.qa }}" == "true" ]]; then
              ENVIRONMENTS=$(echo $ENVIRONMENTS | jq '. += ["qa"]')
            fi
            if [[ "${{ github.event.inputs.staging }}" == "true" ]]; then
              ENVIRONMENTS=$(echo $ENVIRONMENTS | jq '. += ["staging"]')
            fi
            if [[ "${{ github.event.inputs.prodtest }}" == "true" ]]; then
              ENVIRONMENTS=$(echo $ENVIRONMENTS | jq '. += ["prodtest"]')
            fi
            if [[ "${{ github.event.inputs.prod }}" == "true" ]]; then
              ENVIRONMENTS=$(echo $ENVIRONMENTS | jq '. += ["prod"]')
            fi
          fi

          # Format as JSON string for GitHub Actions output
          ENVIRONMENTS_JSON=$(echo $ENVIRONMENTS | jq -c .)
          echo "environments=$ENVIRONMENTS_JSON" >> $GITHUB_OUTPUT

      - name: Debug environment matrix
        run: |
          echo "Generated environments matrix: ${{ steps.set-matrix.outputs.environments }} (${ENV_EMOJI})"

  build-docs:
    name: Build Docs ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      matrix:
        environment: ${{ fromJson(needs.prepare-matrix.outputs.environments) }}
    env:
      WORKSPACE_PATH: app/docs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Echo environment
        run: |
          ENV_EMOJI="${{ matrix.environment == 'prod' && '🚀' || matrix.environment == 'staging' && '🚦' || matrix.environment == 'qa' && '🧪' || matrix.environment == 'prodtest' && '🔬' || '🛠️' }}"
          echo "environment: ${{ matrix.environment }} (${ENV_EMOJI})"

      - name: Setup node and pnpm
        uses: ./.github/actions/setup-node-and-pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build the application
        run: npx nx build docs --verbose

      - name: Zip the dist folder
        run: zip -r docs.zip ${{ env.WORKSPACE_PATH }}/dist

      - name: Upload the zipped dist folder
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.environment }}
          path: docs.zip
          if-no-files-found: error
          retention-days: 1

  build-tizen:
    name: Build Tizen App
    needs: prepare-matrix
    runs-on: ubuntu-latest
    env:
      WORKSPACE_PATH: app/web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node and pnpm
        uses: ./.github/actions/setup-node-and-pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Prepare Tizen CLI
        uses: ./.github/actions/perpare-tizen-cli
        with:
          version: "6.0"

      - name: Add tizen security profile
        uses: ./.github/actions/add-tizen-security-profile
        with:
          author-key: ${{ secrets.TIZEN_AUTHOR_KEY }}
          author-password: ${{ secrets.TIZEN_PASSWORD }}
          distributor-key: ${{ secrets.TIZEN_DISTRIBUTOR_KEY }}
          distributor-password: ${{ secrets.TIZEN_PASSWORD }}

      - name: Build with rsbuild (includes Tizen build and package)
        run: |
          tizen security-profiles list
          npx nx build web

      - name: Log tizen cli logs
        if: always()
        run: cat $HOME/tizen-studio-data/cli/logs/cli.log

      - name: Get Web version and build hash
        id: versioning
        uses: ./.github/actions/get-ctv-version-and-hash

      - name: Calculate package filename
        id: package-filename
        run: echo "filename=demo-tizen-app-${{ steps.versioning.outputs.version }}-${{ steps.versioning.outputs.hash }}" >> $GITHUB_OUTPUT

      - name: Rename wgt file
        run: |
          mv $(ls ${{ env.WORKSPACE_PATH }}/out/*.wgt) ${{ env.WORKSPACE_PATH }}/out/${{ steps.package-filename.outputs.filename }}.wgt

      - name: Upload the wgt file
        uses: actions/upload-artifact@v4
        with:
          name: tizen
          path: ${{ env.WORKSPACE_PATH }}/out/*
          if-no-files-found: error
          retention-days: 1

  # This job runs after all builds are complete and combines all artifacts
  combine-artifacts:
    name: Combine Artifacts
    runs-on: ubuntu-latest
    needs: [build-docs, build-tizen, prepare-matrix]
    if: always() && !cancelled()
    steps:
      - name: Create artifacts directory
        run: mkdir -p combined-artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-artifacts
          merge-multiple: true

      - name: List downloaded artifacts
        run: find combined-artifacts -type f | sort

      - name: Create combined zip file
        run: |
          cd combined-artifacts
          zip -r ../all-artifacts.zip *
          cd ..
          ls -lh all-artifacts.zip

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-artifacts
          path: all-artifacts.zip
          if-no-files-found: error
          retention-days: 30

      # Delete intermediate artifacts that are no longer needed
      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            docs-*
            tizen
          failOnError: false
